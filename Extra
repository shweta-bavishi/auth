import React, { Component } from 'react';
import { Text, TouchableOpacity } from 'react-native';
import t from 'tcomb-form-native'; // 0.6.9
import firebase from 'firebase';
import { Button, Card, Spinner, CardSection } from './common';

var Form = t.form.Form;
var Email = t.refinement(t.String, function (email) {
  var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  return re.test(email);
});
Email.getValidationErrorMessage = function (value, path, context) {
  return 'Invalid Email Address';
};
var Person = t.struct({
  email: Email,
  name: t.String,
  password: t.String,
});
var options = {
  fields: {
    name: {
      placeholder: 'Name',
      auto: 'placeholders',
      blurOnSubmit: true,
      autoCorrect: false
    },
    email: {
      placeholder: 'Email',
      auto: 'placeholders',
      autoCapitalize: 'none',
      blurOnSubmit: true,
      autoCorrect: false
    },
    password: {
      placeholder: 'Password',
      auto: 'placeholders',
      autoCapitalize: 'none',
      blurOnSubmit: true,
      autoCorrect: false,
      secureTextEntry: true,
    }
  }
};
class LoginForm extends Component {
//  state = { email: '', password: '', error: '', loading: false };

  onChange = () => {
    var value = this.refs.form.getValue();
    if (value) {
    this.setState({value});
  }

  }

  clearForm() {
    this.setState({ value: null });
  }

  setValue = () => {
    var value = this.refs.form.getValue();
    if (value) {
    return this.state.value;
  }
  }
  getInitialState = () => {
    return {
      value: {
        name: 'Shweta',
        email: 'Test@test.com',
    //    subject: 'Inquiry for home automation',
        password: 'Hello',
      }
    };
  }
  postData = () => {
    this.setState({ submitted: true })
    var value = this.refs.form.getValue();
 //    const config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'Authorization': 'Basic Y2tfNWJiODJjNzMyZjdmZDdhOWMxOTFhMjZiMjQ3MzkwMWUxNDE0NDI3Mjpjc18xYjI3OWFkNDdlMTkzMGExMzdlZDU1YzM2OGQ0NzkwZjMwMjNiNTJk' } };
 //    if (value) {
 //      axios.post('https://script.google.com/macros/s/AKfycbx5c2gy2XzbrATY9iiFmibrhUpV5VYYzHtsIo0IUszrTySxPTJ6/exec', qs.stringify(
 //        {
 //          subject: 'Inquiry from App',
 //          name: value.name,
 //          message: value.message,
 //          email: value.email,
 //          }
 //      ), config)
 //        .then(function(response) {
 //          this.setState({ submitted: true })
 //          console.log(response.data)
 //        })
 //        .catch(function(error) {
 //          console.log(error)
 //        })
 //        this.clearForm();
 // }
 // else {
 //   return console.log('Better Luck Next Time');
 // }
  }
  // onButtonPress() {
  //   const { email, password } = this.state;
  //   this.setState({ error: '', loading: true });
  //
  //   firebase.auth().signInWithEmailAndPassword(email, password)
  //   .then(() => this.onLoginSuccess)
  //   .catch(() => {
  //       firebase.auth().createUserWithEmailAndPassword(email, password)
  //       .then(() => this.onLoginSuccess)
  //       .catch(() => this.onLoginFail);
  //     });
  // }
  //
  // onLoginFail() {
  //   this.setState({ error: 'Authenticated Failed', loading: false });
  //   console.log(this.state.loading);
  // }
  // onLoginSuccess() {
  //   this.setState({
  //     email: '',
  //     password: '',
  //     error: 'Authenticated',
  //     loading: false
  //   });
  //   console.log(this.state.loading);
  // }

  // onRender() {
  //   if (this.state.loading) {
  //     return <Spinner size="small" />;
  //   }
  //   return (
  //       <Button onPress={this.onButtonPress.bind(this)}>
  //       Login
  //       </Button>
  //     );
  // }
  render() {
    return (
      <Card>
      <Form
        ref="form"
        type={Person}
        options={options}
        onBlur={this.onChange}
        value={this.setValue}
      />
      <TouchableOpacity style={Style.ButtonStyle} onPress={this.postData}>
        <Text style={Style.textStyle}>Submit</Text>
      </TouchableOpacity>
      </Card>
    );
  }
}

const Style = {
  errorTextStyle: {
    fontSize: 20,
    alignItems: 'center',
    color: 'red'
  },
  textStyle: {
    alignSelf: 'center',
    color: '#007aff',
    fontSize: 16,
    fontWeight: '600',
    paddingTop: 10,
    paddingBottom: 10
  },
  ButtonStyle: {
    flex: 1,
    alignSelf: 'stretch',
    backgroundColor: '#fff',
    borderRadius: 5,
    borderWidth: 1,
    borderColor: '#007aff',
    marginLeft: 5,
    marginRight: 5,
    alignItems: 'center',
    height: 20,
  }
};

export default LoginForm;
